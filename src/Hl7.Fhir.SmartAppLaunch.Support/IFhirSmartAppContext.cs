/* 
 * Copyright (c) 2017+ brianpos, Firely and contributors
 * See the file CONTRIBUTORS for details.
 * 
 * This file is licensed under the BSD 3-Clause license
 * available at https://github.com/ewoutkramer/fhir-net-api/blob/master/LICENSE
 */

using Hl7.Fhir.Model;
using Hl7.Fhir.Rest;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.WebApi;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

namespace Hl7.Fhir.SmartAppLaunch
{
    /// <summary>
    /// When the PMS launches a smart application, this is the context data that is provided by the application
    /// for the session, including the patient context, user context, and access to generate the ID Token
    /// </summary>
    public interface IFhirSmartAppContext
    {
        /// <summary>
        /// A unique Value generated by the Host Legacy App for the activation
        /// (like a session key)
        /// </summary>
        string LaunchContext { get; set; }

        /// <summary>
        /// A unique code generated by the Auth component required to retrieve a Token
        /// </summary>
        string Code { get; set; }

        /// <summary>
        /// PKCE - S256 Hashed code_challenge property as passed in
        /// http://build.fhir.org/ig/HL7/smart-app-launch/app-launch.html#obtain-authorization-code
        /// </summary>
        string CodeChallenge { get; set; }

        /// <summary>
        /// Code Challenge method - should alwasy be S256
        /// http://build.fhir.org/ig/HL7/smart-app-launch/app-launch.html#obtain-authorization-code
        /// </summary>
        string CodeChallengeMethod { get; set; }

        /// <summary>
        /// The bearer token to use for this session
        /// </summary>
        string Bearer { get; set; }

        /// <summary>
        /// The approved scopes for the session as granted by the Host legacy
        /// </summary>
        string Scopes { get; set; }

        /// <summary>
        /// This session (and its token) will expire at this time
        /// </summary>
        DateTimeOffset ExpiresAt { get; set; }

        /// <summary>
        /// Function that is be called by the SmartAppLaunch Support cefsharp handlers when the id_token is requested
        /// </summary>
        /// <remarks>
        /// During the processing of this operation you may populate the <b>Principal</b> property
        /// using the <b>CreateClaimsPrincipal.ToPrincipal()</b> extension method
        /// </remarks>
        /// <param name="appDetails">The details of the SMART application that is requesting the identity token</param>
        /// <returns>a signed and encoded JWT token</returns>
        string GetIdToken(SmartApplicationDetails appDetails);

        /// <summary>
        /// And additional context properties to be included in the TokenRequest response
        /// </summary>
        /// <remarks>
        /// The library has some special handling for patient, encounter, episodeofcare, practitioner, practitionerrole and organization
        /// </remarks>
        IEnumerable<KeyValuePair<String, string>> ContextProperties { get; }

        /// <summary>
        /// A Security Principal based on the current logged in user (set by the PMS)
        /// </summary>
        /// <remarks>
        /// If this is a ClaimsPrincipal, the Auth Protocol Handler will add claims based on scope processing
        /// </remarks>
        System.Security.Principal.IPrincipal Principal { get; }
    }
}
